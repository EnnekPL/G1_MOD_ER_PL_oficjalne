// *Script was make in Easy Dialog Maker (EDM)
/*
//========================================
//-----------------> OPCJA *KONIEC* 
//========================================

INSTANCE DIA_CorristoOT_EXIT(C_INFO)
{
	npc             = KDF_8084_CorristoOT;
	nr              = 999;
	condition	= DIA_CorristoOT_EXIT_Condition;
	information	= DIA_CorristoOT_EXIT_Info;
	permanent	= TRUE;
	description     = "Walczmy (Koniec)";
};

FUNC INT DIA_CorristoOT_EXIT_Condition()
{
	return TRUE;
};

FUNC VOID DIA_CorristoOT_EXIT_Info()
{
	AI_StopProcessInfos	(self);
};
*/
/*
//========================================
//-----------------> HELLO3
//========================================

INSTANCE DIA_CorristoOT_HELLO3 (C_INFO)
{
   npc          = KDF_8084_CorristoOT;
   nr           = 3;
   condition    = DIA_CorristoOT_HELLO3_Condition;
   information  = DIA_CorristoOT_HELLO3_Info;
   permanent	= FALSE;
   description	= "Co dał wam ten kamień?";
};

FUNC INT DIA_CorristoOT_HELLO3_Condition()
{
    if (Npc_KnowsInfo (hero, DIA_CorristoOT_Evil))
    {
    return TRUE;
    };
};


FUNC VOID DIA_CorristoOT_HELLO3_Info()
{
    AI_Output (other, self ,"DIA_CorristoOT_HELLO3_15_01"); //Co dał wam ten kamień?
    AI_Output (self, other ,"DIA_CorristoOT_HELLO3_03_02"); //Prowadziłem nad nim badania, aż w końcu udało mi się uwolnić jego moc.
    AI_Output (self, other ,"DIA_CorristoOT_HELLO3_03_03"); //Poszukiwacze użyli go do przywołania potężnych istot z kuźni Beliara.
    AI_Output (self, other ,"DIA_CorristoOT_HELLO3_03_04"); //Nigdy nie uda ci się pokonać naszego Pana.
    AI_Output (self, other ,"DIA_CorristoOT_HELLO3_03_05"); //Zbytnio urósł w siłę.
    AI_Output (self, other ,"DIA_CorristoOT_HELLO3_03_06"); //Jesteś tylko marnym człowiekiem. Nawet ta magiczna zbroja cię nie ocali.
	
    B_LogEntry                     (CH6_CorristoSlepper,"Poszukiwacze wykorzystali kamień do przywołania potężnych istot, które będą chronić Śniącego. Innymi słowy mam kłopoty...");

    B_GiveXP (500);
};
*/
/*
//========================================
//-----------------> JarvisKoxSzmaciarzu
//========================================

INSTANCE DIA_Roscoe_JarvisKoxSzmaciarzu (C_INFO)
{
   npc          = Org_840_Roscoe;
   nr           = 1;
   condition    = DIA_Roscoe_JarvisKoxSzmaciarzu_Condition;
   information  = DIA_Roscoe_JarvisKoxSzmaciarzu_Info;
   permanent	= FALSE;
   description	= "Przysyła mnie Jarvis.";
};

FUNC INT DIA_Roscoe_JarvisKoxSzmaciarzu_Condition()
{
    if (Npc_KnowsInfo (hero, DIA_Jarvis_LikeIt))
    {
    return TRUE;
    };
};


FUNC VOID DIA_Roscoe_JarvisKoxSzmaciarzu_Info()
{
	//edit by Nocturn
    AI_Output (other, self ,"DIA_Roscoe_JarvisKoxSzmaciarzu_15_01"); //Przysyła mnie Jarvis.
    AI_Output (other, self ,"DIA_Roscoe_JarvisKoxSzmaciarzu_15_02"); //Mam poparcie kilku Najemników.
    AI_Output (self, other ,"DIA_Roscoe_JarvisKoxSzmaciarzu_03_03"); //No cóż... Nie chcemy kłopotów z Lee.
    AI_Output (self, other ,"DIA_Roscoe_JarvisKoxSzmaciarzu_03_04"); //Możesz wejść.
    self.aivar[AIV_PASSGATE] = TRUE;
    AI_StopProcessInfos	(self);
};
*/


//............................................
// LeGo view handles
var int H_Bar; // hp
var int M_Bar; // mana
var int S_Bar; // stamina
var int A_Bar; // air
//............................................

//............................................
// alpha variables
var int H_Bar_Alpha;
var int M_Bar_Alpha;
var int S_Bar_Alpha;
var int A_Bar_Alpha;
//............................................

//............................................
// speed constants
const int Bar_FadeIn = 20;
const int Bar_FadeOut = 10;
//............................................

//............................................
// misc
const int POS_OFFSCREEN = 8192 + 256;
//............................................

//========================================
// Prototype for Bars
//========================================
prototype ImmersiveBar(Bar) {
    x = Print_Screen[PS_X] / 2;
    y = Print_Screen[PS_Y] - 20;
    barTop = 3;
    barLeft = 5;
    width = 200;
    height = 20;
    backTex = "Bar_Back.tga";
    barTex = "Bar_Misc.tga";
    value = 100;
    valueMax = 100;
};

//======================================
// HalthBar Instance
//======================================
instance HealthBar(ImmersiveBar) {
	x =  128 ;
	barTex = "Bar_Health.tga";
};

//======================================
// ManaBar Instance
//======================================
instance ManaBar(ImmersiveBar) {
	x = Print_Screen[PS_X] - 128 ;
	barTex = "Bar_Mana.tga";
};

//======================================
// StaminaBar Instance
//======================================
/*
instance StaminaBar(ImmersiveBar) {
	x = Print_Screen[PS_X] / 2;
	barTex = "Bar_Misc.tga";
};
*/
//======================================
// AirBar Instance
//======================================
instance AirBar(ImmersiveBar) {
	x = Print_Screen[PS_X] / 2;
	y = Print_Screen[PS_Y] - 40;
	barTex = "Bar_Air.tga";
};

//======================================
// Function that sets up bar values
//======================================
func void HUD_Loop() {
    
    if(!Hlp_IsValidHandle(H_Bar)) {
        H_Bar = Bar_Create(HealthBar);
    };
	if(!Hlp_IsValidHandle(M_Bar)) {
        M_Bar = Bar_Create(ManaBar); 
    };
	//if(!Hlp_IsValidHandle(S_Bar)) {
  //      S_Bar = Bar_Create(StaminaBar);
   // };
	if(!Hlp_IsValidHandle(A_Bar)) {
        A_Bar = Bar_Create(AirBar);
    };

    Bar_SetMax(H_Bar, hero.attribute[ATR_HITPOINTS_MAX]);
    Bar_SetValue(H_Bar, hero.attribute[ATR_HITPOINTS]);
	
	Bar_SetMax(M_Bar, hero.attribute[ATR_MANA_MAX]);
    Bar_SetValue(M_Bar, hero.attribute[ATR_MANA]);
	
	//Bar_SetMax(S_Bar, Stamina_max);
   // Bar_SetValue(S_Bar, Stamina);
	
	var oCViewStatusBar miscBar; miscBar = _^(MEM_ReadInt(MEM_ReadInt(MEMINT_oGame_Pointer_Address)+144));
	
	var int _swimVal; _swimVal = miscBar.maxHigh; // max val
	var float swimVal2; swimVal2 = castFromIntf (_swimVal); // float
	var int swimVal; swimVal = FloatToInt (swimVal2); // int
	
	Bar_SetMax(A_Bar, swimVal);
	
	_swimVal = miscBar.currentValue; // curr value
	swimVal2 = castFromIntf (_swimVal);
	swimVal = FloatToInt (swimVal2); // int
    Bar_SetValue(A_Bar, swimVal);
};

//======================================
// HealthBar FadeIn/Out function
//======================================
// [internal]
func void _HealthBar_Show() {
	
	if (H_Bar_Alpha == 0) {
		Bar_Show(H_Bar);
	};
	
	H_Bar_Alpha += Bar_FadeIn;
	
	if (H_Bar_Alpha>255) {
		H_Bar_Alpha = 255;
		FF_Remove (_HealthBar_Show);
	};
	
	Bar_SetAlpha(H_Bar,H_Bar_Alpha);
};
// [internal]
func void _HealthBar_Hide() {
	
	H_Bar_Alpha -= Bar_FadeOut;
	
	if (H_Bar_Alpha<0) {
		H_Bar_Alpha = 0;
		Bar_Hide(H_Bar);
		FF_Remove (_HealthBar_Hide);
	};	
	
	Bar_SetAlpha(H_Bar,H_Bar_Alpha);
};

func void HealthBar_Show() {
	if (FF_Active(_HealthBar_Hide)) {
		FF_Remove (_HealthBar_Hide);	
	};
	FF_ApplyOnce(_HealthBar_Show);
};

func void HealthBar_Hide() {
	if (FF_Active(_HealthBar_Show)) {
		FF_Remove (_HealthBar_Show);	
	};
	FF_ApplyOnce(_HealthBar_Hide);
};
//======================================
// ManaBar FadeIn/Out function
//======================================
// [internal]
func void _ManaBar_Show() {

	if (M_Bar_Alpha == 0) {
		Bar_Show(M_Bar);
	};
	
	M_Bar_Alpha += Bar_FadeIn;
	
	if (M_Bar_Alpha>255) {
		M_Bar_Alpha = 255;
		FF_Remove (_ManaBar_Show);
	};
	
	Bar_SetAlpha(M_Bar,M_Bar_Alpha);
};
// [internal]
func void _ManaBar_Hide() {
	M_Bar_Alpha -= Bar_FadeOut;
	
	if (M_Bar_Alpha<0) {
		M_Bar_Alpha = 0;
		Bar_Hide(M_Bar);
		FF_Remove (_ManaBar_Hide);
	};	
	
	Bar_SetAlpha(M_Bar,M_Bar_Alpha);
};
//======================================
func void ManaBar_Show() {
	if (FF_Active(_ManaBar_Hide)) {
		FF_Remove (_ManaBar_Hide);	
	};
	FF_ApplyOnce(_ManaBar_Show);
};
//======================================
func void ManaBar_Hide() {
	if (FF_Active(_ManaBar_Show)) {
		FF_Remove (_ManaBar_Show);	
	};
	FF_ApplyOnce(_ManaBar_Hide);
};
//======================================
// StaminaBar FadeIn/Out function
//======================================
/*
// [internal]
func void _StaminaBar_Show() {

	if (S_Bar_Alpha == 0) {
		Bar_Show(S_Bar);
	};
	
	S_Bar_Alpha += Bar_FadeIn;
	
	if (S_Bar_Alpha>255) {
		S_Bar_Alpha = 255;
		
		FF_Remove (_StaminaBar_Show);
	};
	
	Bar_SetAlpha(S_Bar,S_Bar_Alpha);
};
// [internal]
func void _StaminaBar_Hide() {
	S_Bar_Alpha -= Bar_FadeOut;
	
	if (S_Bar_Alpha<0) {
		S_Bar_Alpha = 0;
		Bar_Hide(S_Bar);
		FF_Remove (_StaminaBar_Hide);
	};	
	
	Bar_SetAlpha(S_Bar,S_Bar_Alpha);
};
//======================================
func void StaminaBar_Show() {
	if (FF_Active(_StaminaBar_Hide)) {
		FF_Remove (_StaminaBar_Hide);	
	};
	FF_ApplyOnce(_StaminaBar_Show);
};
//======================================
func void StaminaBar_Hide() {
	if (FF_Active(_StaminaBar_Show)) {
		FF_Remove (_StaminaBar_Show);	
	};
	FF_ApplyOnce(_StaminaBar_Hide);
};*/
//======================================
// AirBar FadeIn/Out function
//======================================
// [internal]
func void _AirBar_Show() {

	if (A_Bar_Alpha == 0) {
		Bar_Show(A_Bar);
	};

	A_Bar_Alpha += Bar_FadeIn;
	
	if (A_Bar_Alpha>255) {
		A_Bar_Alpha = 255;
		FF_Remove (AirBar_Show);
	};
	
	Bar_SetAlpha(A_Bar,A_Bar_Alpha);
};
// [internal]
func void _AirBar_Hide() {
	A_Bar_Alpha -= Bar_FadeOut;
	
	if (A_Bar_Alpha<0) {
		A_Bar_Alpha = 0;
		Bar_Hide(A_Bar);
		FF_Remove (AirBar_Hide);
	};	
	
	Bar_SetAlpha(A_Bar,A_Bar_Alpha);
};
//======================================
func void AirBar_Show() {
	if (FF_Active(_AirBar_Hide)) {
		FF_Remove (_AirBar_Hide);	
	};
	FF_ApplyOnce(_AirBar_Show);
};
//======================================
func void AirBar_Hide() {
	if (FF_Active(_AirBar_Show)) {
		FF_Remove (_AirBar_Show);	
	};
	FF_ApplyOnce(_AirBar_Hide);
};
//==================================
// Main FadeIn/Out logic
//==================================
func void ImmersiveHUD_func()
{
	
	var int hpBar_ptr; hpBar_ptr = MEM_ReadInt(MEM_ReadInt(MEMINT_oGame_Pointer_Address)+140);
	var int miscBar_ptr; miscBar_ptr = MEM_ReadInt(MEM_ReadInt(MEMINT_oGame_Pointer_Address)+144);
	var int manaBar_ptr; manaBar_ptr = MEM_ReadInt(MEM_ReadInt(MEMINT_oGame_Pointer_Address)+148);
	
	var oCViewStatusBar hpBar; 		hpBar 	= _^(hpBar_ptr);
	var oCViewStatusBar miscBar;	miscBar = _^(miscBar_ptr);
	var oCViewStatusBar manaBar;	manaBar = _^(manaBar_ptr);
	
	
	hpBar.zCView_vposy = POS_OFFSCREEN;
	miscBar.zCView_vposy = POS_OFFSCREEN;
	manaBar.zCView_vposy = POS_OFFSCREEN;

	if ((MEM_Game.pause_screen)) || (!InfoManager_HasFinished()) 	{
		HealthBar_Hide();
		ManaBar_Hide();
		//StaminaBar_Hide();	
		AirBar_Hide();
		return;
	};	
	
	
	//if (PC_HasOpenInventory() || C_NpcIsInFightMode(hero)) {
	//	HealthBar_Show();
	//	ManaBar_Show();
		//StaminaBar_Show();
	//	return;
	//};
	
	if (hero.attribute[ATR_HITPOINTS] < hero.attribute[ATR_HITPOINTS_MAX]) {
		HealthBar_Show();
	} else {
		HealthBar_Hide();
	};
	
	if (hero.attribute[ATR_MANA] < hero.attribute[ATR_MANA_MAX]) {
		ManaBar_Show();
	} else {
		ManaBar_Hide();	
	};
	
	
	if (Ani_BodyStateContains(hero,BS_DIVE)) {
		AirBar_Show();
	} else {
		AirBar_Hide();
	};
};

//==================================
// Init func, for Init_global
//==================================
func void ImmersiveHUD_Init() {
    //FF_ApplyOnce(HUD_Loop);
};

//===================================================
// Get ani name
//===================================================
func string Get_CurrentAniName(var int npc_inst)
{
	var ocNpc npc; npc = Hlp_getNpc(npc_inst);
	
	var int hlp;
	hlp = MEM_ReadInt(npc.anictrl+104);//zCModel 		
	if(hlp) 
	{
		hlp = MEM_ReadInt(hlp+56);//*ActiveAniLayer1			
		if(hlp)
		{
			hlp = MEM_ReadInt(hlp);//*oCAni				
			if(hlp)
			{ 
				return MEM_ReadString(hlp+36); // This will read active ani name(?)
			};//aniname(zstring)
		};
	};
	return "ERR";
};
//===================================================
// Check bodystate
//===================================================
func int  Ani_BodyStateContains	(var C_NPC slf, var int bodystate)
{
	if ((Npc_GetBodyState(slf)&(BS_MAX|BS_FLAG_INTERRUPTABLE|BS_FLAG_FREEHANDS)) == (bodystate&(BS_MAX|BS_FLAG_INTERRUPTABLE|BS_FLAG_FREEHANDS)))			// sowohl bei der Abfrage als auch beim Vergleichswert die höhren Bits ausmaskieren!
	{																// ...ja!
		return TRUE;
	}
	else
	{
		return FALSE;
	};
};




var int CSColor;
var int CSAlpha;

func string oCInfo__OnGetText() {
	return MEM_ReadString (ECX + 48);
};

func void SetChoicesPos() {
	var int manager; manager = MEM_ReadInt (MEMINT_oCInformationManager_Address + 28);
	var zCArray arr; arr = _^ (manager + 172);
	
	Print_GetScreenSize();
	
	var int i; i = 0;
	var int loop; loop = MEM_StackPos.position;
	
	if (arr.array)
	&& (i < arr.numInArray) {
																		// Change if other
		var int len; len = Print_GetStringWidth (oCInfo__OnGetText(), "font_old_10_white.tga");
		MEM_WriteInt (manager + 56, len);
		
		i += 1;
		MEM_StackPos.position = loop;
	};
};

func void CSEnable()
{/*
	var int View_ptr;
View_ptr=MEM_InstGetOffset(MEM_GAME)+52;
View_ptr=MEM_ReadInt(View_ptr);
View_ptr=View_ptr+60;
MEM_WriteInt(View_ptr,0);
View_ptr=View_ptr+8;
MEM_WriteInt(View_ptr,1);
		//disable zoom effect
	View_ptr=MEM_InstGetOffset(MEM_GAME)+60;
	View_ptr=MEM_ReadInt(View_ptr);
	View_ptr=View_ptr+4;
	MEM_WriteInt(View_ptr,0);

	//remove tex - conversation
	View_ptr=MEM_InstGetOffset(MEM_GAME)+52;
	View_ptr=MEM_ReadInt(View_ptr);
	View_ptr=View_ptr+60;
	MEM_WriteInt(View_ptr,0);
	//change ypos of conversation window
		View_ptr=View_ptr+8;
	MEM_WriteInt(View_ptr,1);
		//choicebox move
	View_ptr = MEM_ReadInt(MEMINT_oCInformationManager_Address+28);
	var int screen_y_size;
	var int tmp;
	screen_y_size=MEM_ReadInt(View_ptr+76); //4c
	screen_y_size=MEM_ReadInt(screen_y_size+68); //44
	view_ptr = view_ptr+60;//
	if(screen_y_size<=768)
	{
	tmp=screen_y_size*21/24 - ((screen_y_size*21/24)%1);
	MEM_WriteInt(View_ptr,tmp);//3C /nothing /0 - y moved		
	view_ptr = view_ptr+8;
	MEM_WriteInt(View_ptr,screen_y_size-tmp);//44 //rest of screen for box			
	}
	else
	{
		tmp=screen_y_size*113/128; tmp = tmp - (tmp%1);
		if(screen_y_size-tmp>120)//if there is more than 120 px at the cinema bar - center box
		{
		tmp = tmp + (screen_y_size-tmp-120)/2;
		tmp = tmp - (tmp%1);
		MEM_WriteInt(View_ptr,tmp);//3C  - y moved		
		view_ptr = view_ptr+8;
		MEM_WriteInt(View_ptr,120);//44 //120 px for box				
		}
		else
		{
		MEM_WriteInt(View_ptr,tmp);//3C  - y moved			view_ptr = view_ptr+8;
		view_ptr = view_ptr+8;		
		MEM_WriteInt(View_ptr,screen_y_size-tmp);//44 //rest of screen for box			
		};
	};
	view_ptr = view_ptr+28;
	MEM_WriteInt(View_ptr,0); //60 tex*/

	MEM_Game.array_view_visible[3] = 1;
	MEM_Game.array_view_enabled[3] = 1;
	
	var int CSptr; CSptr = MEM_InstGetOffset (MEM_Game) + 12;	
				   CSptr = MEM_ReadInt (CSptr);
				   CSptr += 2248;
	MEM_WriteInt (CSptr, 1);
				   CSptr += 4;	CSColor = CSptr;
	MEM_WriteInt (CSptr, 0);

	var int CSViewptr; CSViewptr = MEM_InstGetOffset (MEM_Game) + 60;
					   CSViewptr = MEM_ReadInt (CSViewptr);
					   CSViewptr += 4;
	MEM_WriteInt (CSViewptr, 0);
	
	//SetChoicesPos();
	
	var int info; info = MEM_ReadInt (MEMINT_oCInformationManager_Address + 28);
	MEM_WriteInt (info + 104, RGBA (0, 0, 0, 0));
	MEM_WriteInt (info + 52, 8192);
	
	var int box; box = MEM_InstGetOffset (MEM_GAME) + 52;
				 box = MEM_ReadInt(box);
				 box += 60;
	MEM_WriteInt (box, 0);
	
	var int View_ptr;
View_ptr=MEM_InstGetOffset(MEM_GAME)+52;
View_ptr=MEM_ReadInt(View_ptr);
View_ptr=View_ptr+60;
MEM_WriteInt(View_ptr,0);
View_ptr=View_ptr+8;
MEM_WriteInt(View_ptr,1);
};

func void SetCSColor() {
	CSEnable();
	
	CSAlpha += 5;
	
	if (CSAlpha >= 255) { 
		CSAlpha = 255;
	};
	MEM_WriteInt (CSColor, RGBA (0, 0, 0, CSAlpha));
};

func void _SetCSColor() {
	CSEnable();
	
	CSAlpha -= 5;
	MEM_WriteInt (CSColor, RGBA (0, 0, 0, CSAlpha));
	
	if (CSAlpha <= 4) {
		CSAlpha = 0;
		FF_Remove (_SetCSColor);
	};
};

//Trade_ChangeSellMultiplier (1/2);
/*	const int hook = 0;
	if (!hook) {
		const int oCInfo__OnGetText = 6707312;
		HookEngine (oCInfo__OnGetText, 8, "Choices_Hook");
		
		hook = 1;
	};
	FF_ApplyOnce (SetCSColor);*/
	
	//if (Npc_IsInState(self,ZS_Teaching_Joru)) ||  (Npc_IsInState(self,ZS_Teaching_Tondral))  ||  (Npc_IsInState(self,ZS_Teaching_Cadar)) ||  (Npc_IsInState(self,ZS_Teaching_Tyon))  ||  (Npc_IsInState(self,ZS_PracticeSword)) 
	//{
	//AI_Output (self, other,"hymnmm"); //Hmm? 
		//AI_PlayAni		(self,	"T_PLUNDER");
		//AI_PlayAni (self,"T_LGUARD_2_STAND");	
		//AI_RemoveWeapon (self);
	//};
	
/*	if (self == hlp_getnpc(GRD_2003_Strażnik))
	{
	AI_Output		(self,hero,"Destroy_practicesword"); //Witaj!
	print ("jsaasass");
	};*/
	
		//FF_Remove (SetCSColor);
	//FF_ApplyOnce (_SetCSColor);
	
	//========================================
//-----------------> NOVIZE
//========================================

INSTANCE DIA_Jim_NOVIZE (C_INFO)
{
   npc          = STT_2077_Jim;
   nr           = 1;
   condition    = DIA_Jim_NOVIZE_Condition;
   information  = DIA_Jim_NOVIZE_Info;
   permanent	= FALSE;
   description	= "Może mógłbym zostać kurierem magów?";
};

FUNC INT DIA_Jim_NOVIZE_Condition()
{
    if (Npc_KnowsInfo (hero, DIA_JIM_Frau)) && (Kapitel == 10) //offf
    {
    return TRUE;
    };
};


FUNC VOID DIA_Jim_NOVIZE_Info()
{
    AI_Output (other, self ,"DIA_Jim_NOVIZE_15_01"); //Może mógłbym zostać kurierem magów?
    AI_Output (self, other ,"DIA_Jim_NOVIZE_03_02"); //Hmm.. No nie wiem. Mhmm...
    AI_Output (self, other ,"DIA_Jim_NOVIZE_03_03"); //No dobrze. Spróbuję cię jakoś wkręcić, ale musisz coś dla mnie zrobić.
    AI_Output (other, self ,"DIA_Jim_NOVIZE_15_04"); //Jestem gotowy.
    AI_Output (self, other ,"DIA_Jim_NOVIZE_03_05"); //Trzeba zająć się starym ołtarzem Beliara w jaskini za Obozem. Ołtarz został sprofanowany przez kilku Kopaczy.
    AI_Output (self, other ,"DIA_Jim_NOVIZE_03_06"); //Taki sprofanowany ołtarz jest bardzo niebezpieczny. Nie możemy dopuścić, żeby zalęgli się tu nieumarli.
    AI_Output (self, other ,"DIA_Jim_NOVIZE_03_07"); //Dam ci butelkę wody święconej. Idź do ołtarza i pokrop go wodą.
    AI_Output (self, other ,"DIA_Jim_NOVIZE_03_08"); //Aha. Zajrzyj też na stary cmentarz. Obawiam się, że i tam dotarli.
    AI_Output (other, self ,"DIA_Jim_NOVIZE_15_09"); //Gdzie znajdę ten cmentarz?
    AI_Output (self, other ,"DIA_Jim_NOVIZE_03_10"); //Cmentarz poległych Kopaczy znajduje się nad Opuszczoną Kopalnią. 
    AI_Output (self, other ,"DIA_Jim_NOVIZE_03_11"); //Leżą tam głównie ci, którzy zginęli w katastrofie. 
    AI_Output (other, self ,"DIA_Jim_NOVIZE_15_12"); //Rozumiem.
    AI_Output (self, other ,"DIA_Jim_NOVIZE_03_13"); //No. Masz tę wodę i wróć jak skończysz. 
    B_Story_JimQuest ();
};



//========================================
//-----------------> LetsGoToCave
//========================================

INSTANCE DIA_Corristo_LetsGoToCave (C_INFO)
{
   npc          = KDF_402_Corristo;
   nr           = 1;
   condition    = DIA_Corristo_LetsGoToCave_Condition;
   information  = DIA_Corristo_LetsGoToCave_Info;
   permanent	= FALSE;
   description	= "Chodź za mną!";
};

FUNC INT DIA_Corristo_LetsGoToCave_Condition()
{
    if (Npc_KnowsInfo (hero, DIA_Corristo_MamSkalke)) //dać bagietce specjalną zmienną odblokowującą ten dialog
    {
    return TRUE;
    };
};


FUNC VOID DIA_Corristo_LetsGoToCave_Info()
{
    AI_Output (other, self ,"DIA_Corristo_LetsGoToCave_15_01"); //Chodź za mną!
    AI_Output (self, other ,"DIA_Corristo_LetsGoToCave_03_02"); //Prowadź, młodzieńcze.
    self.aivar[AIV_PARTYMEMBER] = TRUE;
    Npc_ExchangeRoutine (self,"FOLLOW");
    AI_StopProcessInfos	(self);
};

//========================================
//-----------------> Cave1n
//========================================

INSTANCE DIA_Corristo_Cave1n (C_INFO)
{
   npc          = KDF_402_Corristo;
   nr           = 2;
   condition    = DIA_Corristo_Cave1n_Condition;
   information  = DIA_Corristo_Cave1n_Info;
   permanent	= FALSE;
   Important    = TRUE;
};

FUNC INT DIA_Corristo_Cave1n_Condition()
{
    if (Npc_KnowsInfo (hero, DIA_Corristo_LetsGoToCave))
    && (Npc_GetDistToWP (self, "LOCATION_23_CAVE_1_OUT") < 1000)
    {
    return TRUE;
    };
};


FUNC VOID DIA_Corristo_Cave1n_Info()
{
	AI_GotoNpc			(self, hero);
    AI_Output (other, self ,"DIA_Corristo_Cave1n_15_01"); //Chyba tutaj ci się spodoba.
    AI_Output (self, other ,"DIA_Corristo_Cave1n_03_02"); //Skąd wiedziałeś o tym miejscu?
    AI_Output (other, self ,"DIA_Corristo_Cave1n_15_03"); //To stara destylarnia. Pracowało tu kilku Szkodników.
    AI_Output (self, other ,"DIA_Corristo_Cave1n_03_04"); //Na pewno jest tu bezpiecznie?
    AI_Output (other, self ,"DIA_Corristo_Cave1n_15_05"); //Tak. Zadbałem o to.
    B_LogEntry                     (CH1_CorristoEvil,"Zaprowadziłem Corristo do starej destylarni za Nowym Obozem. To chyba koniec mojej pracy dla niego. Mogę wrócić do własnych problemów.");
    Log_SetTopicStatus       (CH1_CorristoEvil, LOG_SUCCESS);
    MIS_CorristoEvil = LOG_SUCCESS;

    B_GiveXP (300);
    CreateInvItems (self, ItMiNugget, 300);
    B_GiveInvItems (self, other, ItMiNugget, 300);
	self.aivar[AIV_PARTYMEMBER] = false;
    Npc_ExchangeRoutine (KDF_402_Corristo,"cave1");
    AI_StopProcessInfos	(self);
};

//========================================
//-----------------> CAVE2IN
//========================================

INSTANCE DIA_Corristo_CAVE2IN (C_INFO)
{
   npc          = KDF_402_Corristo;
   nr           = 3;
   condition    = DIA_Corristo_CAVE2IN_Condition;
   information  = DIA_Corristo_CAVE2IN_Info;
   permanent	= FALSE;
   Important    = TRUE;
};

FUNC INT DIA_Corristo_CAVE2IN_Condition()
{
    if (Npc_GetDistToWP (self, "OW_PATH_ORCRUIN_GOLEM") < 1000)
    && (Npc_KnowsInfo (hero, DIA_Corristo_LetsGoToCave))
    {
    return TRUE;
    };
};


FUNC VOID DIA_Corristo_CAVE2IN_Info()
{
	AI_GotoNpc			(self, hero);
    AI_Output (other, self ,"DIA_Corristo_CAVE2IN_15_01"); //No i jesteśmy.
    AI_Output (self, other ,"DIA_Corristo_CAVE2IN_03_02"); //Laboratorium alchemiczne w opuszczonej świątyni?
    AI_Output (self, other ,"DIA_Corristo_CAVE2IN_03_03"); //Wspaniale! Weź tę rudę.
    AI_Output (self, other ,"DIA_Corristo_CAVE2IN_03_04"); //Należy ci się.

    Npc_ExchangeRoutine (self,"cave2");
    B_LogEntry                     (CH1_CorristoEvil,"Zaprowadziłem Corristo do laboratoriom alchemicznego w starej świątyni. To chyba koniec mojej pracy dla niego. Mogę wrócić do własnych problemów.");
    Log_SetTopicStatus       (CH1_CorristoEvil, LOG_SUCCESS);
    MIS_CorristoEvil = LOG_SUCCESS;
	self.aivar[AIV_PARTYMEMBER] = false;
    Npc_ExchangeRoutine (KDF_402_Corristo,"cave2");
    B_GiveXP (600);
    CreateInvItems (self, ItMiNugget, 1000);
    B_GiveInvItems (self, other, ItMiNugget, 1000);
    AI_Output (other, self ,"DIA_Corristo_CAVE2IN_15_05"); //Jeszcze coś.
    AI_Output (other, self ,"DIA_Corristo_CAVE2IN_15_06"); //W tym miejscu mogą czaić się złe moce. 
    AI_Output (self, other ,"DIA_Corristo_CAVE2IN_03_07"); //Spokojnie, poradzę sobie z nimi.
    AI_Output (self, other ,"DIA_Corristo_CAVE2IN_03_08"); //Powiedzmy, że zależy mi na ciszy i spokoju.
    AI_StopProcessInfos	(self);
};


var int ScreenFadeEnabled;
var int ScreenFadeAlpha;

func void ScreenFade () 
{
    MEM_Camera.screenFadeEnabled = true;
    MEM_Camera.screenFadeColor = RGBA (0, 0, 0, ScreenFadeAlpha);

    if (ScreenFadeEnabled)
    {
        if (ScreenFadeAlpha < 255)
        {
        ScreenFadeAlpha += 5;
        MEM_Game.game_drawall = false;
        };
    }
    else
    {
        if (ScreenFadeAlpha > 0)
        {
        ScreenFadeAlpha -= 5;
        };

        if (ScreenFadeAlpha == 0)
        {
        MEM_Game.game_drawall = true;
        };
    };
};


//========================================
//-----------------> OreWyplata
//========================================

INSTANCE DIA_Caine_OreWyplata (C_INFO)
{
   npc          = Nov_1301_Caine;
   nr           = 2;
   condition    = DIA_Caine_OreWyplata_Condition;
   information  = DIA_Caine_OreWyplata_Info;
   permanent	= FALSE;
   description	= "Gdzie moja ruda?";
};

FUNC INT DIA_Caine_OreWyplata_Condition()
{
    if (pensja2 != wld_getday()) && (CaineFriend == true)
    {
    return TRUE;
    };
};


FUNC VOID DIA_Caine_OreWyplata_Info()
{
    AI_Output (other, self ,"DIA_Caine_OreWyplata_15_01"); //Gdzie moja ruda?
    AI_Output (self, other ,"DIA_Caine_OreWyplata_03_02"); //Trzymaj. 
    CreateInvItems (self, ItMiNugget, 60);
    B_GiveInvItems (self, other, ItMiNugget, 60);
    pensja2  = wld_getday();
    AI_StopProcessInfos	(self);
};





//========================================
//-----------------> LEKI
//========================================

INSTANCE DIA_CorKalom_LEKI (C_INFO)
{
   npc          = GUR_1201_CorKalom;
   nr           = 1;
   condition    = DIA_CorKalom_LEKI_Condition;
   information  = DIA_CorKalom_LEKI_Info;
   permanent	= FALSE;
   description	= "Drwal Hanson potrzebuje leku na zarazę.";
};

FUNC INT DIA_CorKalom_LEKI_Condition()
{
    if (Npc_KnowsInfo (hero, DIA_Hanson_QUEST1))
    {
    return TRUE;
    };
};


FUNC VOID DIA_CorKalom_LEKI_Info()
{
    AI_Output (other, self ,"DIA_CorKalom_LEKI_15_01"); //Drwal Hanson potrzebuje leku na zarazę.
    AI_Output (self, other ,"DIA_CorKalom_LEKI_03_02"); //Zarazę? Gdzie on się tego nabawił?
    AI_Output (other, self ,"DIA_CorKalom_LEKI_15_03"); //Na bagnie. Ciągle tam przesiaduje. Twierdzi, że jest z nim coraz gorzej.
    AI_Output (self, other ,"DIA_CorKalom_LEKI_03_04"); //Akurat miałem dla niego pewną robotę... Chwileczkę, muszę poszukać receptury i przyrządzić lekarstwo.
	B_UseFakeScroll();
	AI_Output (self, other ,"DIA_CorKalom_LEKI_03_05"); //Tak jak sądziłem. Nie mam składników...
	AI_Output (other, self ,"DIA_CorKalom_LEKI_15_06"); //Co jest ci potrzebne? Postaram się to przynieść.
	AI_Output (self, other ,"DIA_CorKalom_LEKI_03_07"); //Liść dębu, psianka i górski mech. Psianki znajdziesz w jaskiniach, górski mech, wiadomo że na wyżynach, a co do liści dębu... szukać pod wysokimi drzewami, choć to nie jest reguła.
	AI_Output (other, self ,"DIA_CorKalom_LEKI_15_08"); //Rozumiem, postaram się wkrótce wrócić.
	
    B_LogEntry                     (CH1_ChoryDrwal,"Cor Kalom już miał się zabrać za przygotowywanie lekarstwa, ale okazało się, że nie ma składników. Mam mu przynieść liść dębu, psiankę i górski mech.");
};

//========================================
//-----------------> ingredients
//========================================
var int waiting_1201_HansonDrug;
INSTANCE DIA_CorKalom_ingredients (C_INFO)
{
   npc          = GUR_1201_CorKalom;
   nr           = 1;
   condition    = DIA_CorKalom_ingredients_Condition;
   information  = DIA_CorKalom_ingredients_Info;
   permanent	= FALSE;
   description	= "Mam dla ciebie składniki na lekarstwo dla Hansona.";
};

FUNC INT DIA_CorKalom_ingredients_Condition()
{
    if (Npc_KnowsInfo (hero, DIA_CorKalom_LEKI)) && (Npc_HasItems (other, ItFo_Plants_OrcHerb_02) >=1) && (Npc_HasItems (other, ItFo_Plants_Nightshadow_01) >=1) && (Npc_HasItems (other, ItFo_Plants_mountainmoos_01) >=1)
    {
    return TRUE;
    };
};


FUNC VOID DIA_CorKalom_ingredients_Info()
{
    AI_Output (other, self ,"DIA_CorKalom_ingredients_15_01"); //Mam dla ciebie składniki na lekarstwo dla Hansona.
    AI_Output (self, other ,"DIA_CorKalom_ingredients_03_02"); //Świetnie. Daj mi je. Jutro mikstura będzie gotowa. 
    AI_Output (other, self ,"DIA_CorKalom_ingredients_15_03"); //Dopiero jutro?
    AI_Output (self, other ,"DIA_CorKalom_ingredients_03_04"); //Nie jestem w stanie przyspieszyć pewnych naturalnych procesów...
	waiting_1201_HansonDrug = Wld_GetDay();
    B_LogEntry                     (CH1_ChoryDrwal,"Zaniosłem Cor Kalomowi składniki, jednak na miksturę muszę czekać do jutra.");
	B_GiveInvItems (self, other, ItFo_Plants_OrcHerb_02, 1);
	B_GiveInvItems (self, other, ItFo_Plants_Nightshadow_01, 1);
	B_GiveInvItems (self, other, ItFo_Plants_mountainmoos_01, 1);
};

//========================================
//-----------------> GetDrug
//========================================

INSTANCE DIA_CorKalom_GetDrug (C_INFO)
{
   npc          = GUR_1201_CorKalom;
   nr           = 1;
   condition    = DIA_CorKalom_GetDrug_Condition;
   information  = DIA_CorKalom_GetDrug_Info;
   permanent	= FALSE;
   description	= "Czy lek jest już gotowy?";
};

FUNC INT DIA_CorKalom_GetDrug_Condition()
{
    if (Npc_KnowsInfo (hero, DIA_CorKalom_ingredients)) && (waiting_1201_HansonDrug != Wld_GetDay())
    {
    return TRUE;
    };
};


FUNC VOID DIA_CorKalom_GetDrug_Info()
{
    AI_Output (other, self ,"DIA_CorKalom_GetDrug_15_01"); //Czy lek jest już gotowy?
    AI_Output (self, other ,"DIA_CorKalom_GetDrug_03_02"); //Masz, zanieś go Hansownowi.
	
	CreateInvItems (self, ItMis_Drug, 1);
    B_GiveInvItems (self, other, ItMis_Drug, 1);
	
    B_LogEntry                     (CH1_ChoryDrwal,"Cor Kalom dał mi przygotowany lek. Muszę go teraz zanieść Hansonowi.");
};


 /*
//========================================
//-----------------> Sprawa
//========================================

INSTANCE DIA_CorAngar_Sprawa (C_INFO) // przecież to zadanie zleca nam Shawn ***FIX***
{
   npc          = GUR_1202_CorAngar;
   nr           = 1;
   condition    = DIA_CorAngar_Sprawa_Condition;
   information  = DIA_CorAngar_Sprawa_Info;
   permanent	= FALSE;
   Important    = TRUE;
};

FUNC INT DIA_CorAngar_Sprawa_Condition()
{
    if (kapitel == 4)

    && (Npc_KnowsInfo (hero, GUR_1201_CorKalom_JoinPSI))
    {
    return TRUE;
    };
};


FUNC VOID DIA_CorAngar_Sprawa_Info()
{
    AI_Output (self, other ,"DIA_CorAngar_Sprawa_03_01"); //Zaczekaj. Mam dla ciebie zadanie.
    AI_Output (self, other ,"DIA_CorAngar_Sprawa_03_02"); //Doszły nas wieści ze Starej Kopalni.
    AI_Output (self, other ,"DIA_CorAngar_Sprawa_03_03"); //Podobno sytuacja w Kolonii jest bardzo zła.
    AI_Output (other, self ,"DIA_CorAngar_Sprawa_15_04"); //Bynajmniej. Na czym polega moje zadanie?
    AI_Output (self, other ,"DIA_CorAngar_Sprawa_03_05"); //Udaj się w pobliże Starej Kopalni i sprawdź, czy nasi bracia z kopalni żyją.
    AI_Output (self, other ,"DIA_CorAngar_Sprawa_03_06"); //Mam nadzieję, że udało im się uciec.
    AI_Output (self, other ,"DIA_CorAngar_Sprawa_03_07"); //Tylko bądź ostrożny.
    MIS_HelpBrothersBra  = LOG_RUNNING;

    Log_CreateTopic            (CH1_HelpBrothersBra , LOG_MISSION);
    Log_SetTopicStatus       (CH1_HelpBrothersBra , LOG_RUNNING);
    B_LogEntry                     (CH1_HelpBrothersBra ,"Cor Angar kazał mi sprawdzić, co stało się z naszymi braćmi z kopalni.");
};
*/


//========================================
//-----------------> QUEST2_E
//========================================

INSTANCE DIA_Hanson_QUEST2_E (C_INFO)
{
   npc          = NOV_5008_Hanson;
   nr           = 5;
   condition    = DIA_Hanson_QUEST2_E_Condition;
   information  = DIA_Hanson_QUEST2_E_Info;
   permanent	= FALSE;
   description	= "Masz się zgłosić do świątyni!";
};

FUNC INT DIA_Hanson_QUEST2_E_Condition()
{
    if (Npc_KnowsInfo (hero, DIA_Shawn_QUEST3_OK)) && (kapitel == 10)
    {
    return TRUE;
    };
};


FUNC VOID DIA_Hanson_QUEST2_E_Info()
{
    AI_Output (other, self ,"DIA_Hanson_QUEST2_E_15_01"); //Masz się zgłosić do świątyni! Shawn chce z tobą porozmawiać.
    AI_Output (self, other ,"DIA_Hanson_QUEST2_E_03_02"); //Czy to ma coś wspólnego z tymi zabójstwami? Już idę.
    B_GiveXP (50);
	Npc_ExchangeRoutine (NOV_5008_Hanson,"temple");
    AI_StopProcessInfos	(self);
};

////////////////////////////////////////////
// Czarny Mag - wątek nieaktywny
////////////////////////////////////////////

//========================================
//-----------------> POSZUKIWACZE
//========================================

INSTANCE DIA_Shawn_POSZUKIWACZE (C_INFO)
{
   npc          = TPL_5004_Shawn;
   nr           = 8;
   condition    = DIA_Shawn_POSZUKIWACZE_Condition;
   information  = DIA_Shawn_POSZUKIWACZE_Info;
   permanent	= FALSE;
   description	= "Co z Hansonem?";
};

FUNC INT DIA_Shawn_POSZUKIWACZE_Condition()
{
    if (Npc_KnowsInfo (hero, DIA_Shawn_QUEST3_OK)) && (Npc_KnowsInfo (hero, DIA_Hanson_QUEST2_E)) && (kapitel == 10)
    {
    return TRUE;
    };
};


FUNC VOID DIA_Shawn_POSZUKIWACZE_Info()
{
    AI_Output (other, self ,"DIA_Shawn_POSZUKIWACZE_15_01"); //Co z Hansonem?
    AI_Output (self, other ,"DIA_Shawn_POSZUKIWACZE_03_02"); //Musimy go przesłuchać. 
    AI_Output (self, other ,"DIA_Shawn_POSZUKIWACZE_03_03"); //Nurtuje mnie skąd wziął się głos, który kazał mu zabić Nowicjuszy. 
    AI_Output (other, self ,"DIA_Shawn_POSZUKIWACZE_15_04"); //Może Hanson próbuje udawać psychopatę, aby nie zostać ukaranym?
    AI_Output (self, other ,"DIA_Shawn_POSZUKIWACZE_03_05"); //To również ma sens... Ale co jeżeli mówi prawdę? Ktoś wpływowy i niebezpieczny kręci się w Kolonii.
    AI_Output (self, other ,"DIA_Shawn_POSZUKIWACZE_03_06"); //Muszę napisać list do Cronosa w tej sprawie. 
	MIS_MroczneBractwo = LOG_RUNNING;

    Log_CreateTopic            (CH1_MroczneBractwo, LOG_MISSION);
    Log_SetTopicStatus       (CH1_MroczneBractwo, LOG_RUNNING);
    B_LogEntry                     (CH1_MroczneBractwo,"Shawn obawia się tego, który rzekomo zlecił Hansonowi zabójstwo. To coś może być dla nas zagrożeniem.");

   // B_GiveXP (150);

};

//========================================
//-----------------> QUEST4
//========================================

INSTANCE DIA_Shawn_QUEST4 (C_INFO)
{
   npc          = TPL_5004_Shawn;
   nr           = 9;
   condition    = DIA_Shawn_QUEST4_Condition;
   information  = DIA_Shawn_QUEST4_Info;
   permanent	= FALSE;
   description	= "Mógłbym zanieść twój list.";
};

FUNC INT DIA_Shawn_QUEST4_Condition()
{
    if (Npc_KnowsInfo (hero, DIA_Shawn_POSZUKIWACZE))
    {
    return TRUE;
    };
};


FUNC VOID DIA_Shawn_QUEST4_Info()
{
    AI_Output (other, self ,"DIA_Shawn_QUEST4_15_01"); //Mógłbym zanieść twój list. W końcu nie takie rzeczy się robiło.
    AI_Output (self, other ,"DIA_Shawn_QUEST4_03_02"); //Bardzo ci dziękuję. Świetny pomysł. Zaczekaj zaraz ci go dam.
    B_UseFakeScroll ();
    CreateInvItems (self, ItMi_ListdoCronosa, 1);
    B_GiveInvItems (self, other, ItMi_ListdoCronosa, 1);
    MIS_ListDoCronosa = LOG_RUNNING;

    Log_CreateTopic            (CH1_ListDoCronosa, LOG_MISSION);
    Log_SetTopicStatus       (CH1_ListDoCronosa, LOG_RUNNING);
    B_LogEntry                     (CH1_ListDoCronosa,"Shawn dał mi list, który muszę wręczyć Cronosowi w Nowym Obozie.");
};

//========================================
//-----------------> LIST
//========================================

INSTANCE DIA_Cronos_LIST (C_INFO)
{
   npc          = KDW_604_Cronos;
   nr           = 5;
   condition    = DIA_Cronos_LIST_Condition;
   information  = DIA_Cronos_LIST_Info;
   permanent	= FALSE;
   description	= "Mam list z Bractwa.";
};

FUNC INT DIA_Cronos_LIST_Condition()
{
    if (Npc_HasItems (other, ItMi_ListdoCronosa) >=1)
    && (MIS_ListDoCronosa == LOG_RUNNING)
    {
    return TRUE;
    };
};


FUNC VOID DIA_Cronos_LIST_Info()
{
    AI_Output (other, self ,"DIA_Cronos_LIST_15_01"); //Mam list z Bractwa.
    AI_Output (self, other ,"DIA_Cronos_LIST_03_02"); //Jaki list? Nie oczekujemy odpowiedzi.
    AI_Output (other, self ,"DIA_Cronos_LIST_15_03"); //To list dotyczący podejrzanych opętań w Bractwie. Guru potrzebują waszych porad.
    AI_Output (self, other ,"DIA_Cronos_LIST_03_04"); //Niepokoi mnie ta wiadomość. Dziękuję za list. Wkrótce wyślę kuriera z odpowiedzią.
    B_LogEntry                     (CH1_ListDoCronosa,"Zaniosłem list Cronosowi. Był wyraźnie zaniepokojony tym, co dzieje się w Bractwie Śniącego.");
    Log_SetTopicStatus       (CH1_ListDoCronosa, LOG_SUCCESS);
    MIS_ListDoCronosa = LOG_SUCCESS;
	B_GiveInvItems (other, self, ItMi_ListdoCronosa, 1);
	Npc_RemoveInvItems (self, ItMi_ListdoCronosa, 1);
    B_GiveXP (50);
    AI_StopProcessInfos	(self);
};